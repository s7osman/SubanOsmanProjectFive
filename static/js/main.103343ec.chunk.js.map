{"version":3,"sources":["Firebase.js","Form.js","App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","Form","handleChange","event","setState","userGoal","target","value","handleClick","preventDefault","database","ref","push","state","action","htmlFor","className","type","id","onChange","this","placeholder","minLength","onClick","Component","App","deleteGoal","goalId","child","remove","goals","on","snapshot","newGoals","data","val","key","name","map","goal","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"+SAaAA,IAASC,cAVc,CACnBC,OAAQ,0CACRC,WAAY,kCACZC,YAAa,yCACbC,UAAW,kBACXC,cAAe,8BACfC,kBAAmB,cACnBC,MAAO,6CAKIR,QAAf,ECoCeS,E,kDA9CX,aAAe,IAAD,8BACV,gBAOJC,aAAe,SAACC,GAChB,EAAKC,SAAS,CACVC,SAAUF,EAAMG,OAAOC,SAVb,EAelBC,YAAc,SAACL,GACXA,EAAMM,iBAEQjB,EAASkB,WAAWC,MAC5BC,KAAK,EAAKC,MAAMR,UAEtB,EAAKD,SAAS,CACdC,SAAU,MApBN,EAAKQ,MAAQ,CACTR,SAAU,IAHJ,E,qDA4Bd,OACI,0BAAMS,OAAO,UACT,2BAAOC,QAAQ,UAAUC,UAAU,WAAnC,qBACA,2BACAC,KAAK,OACLC,GAAG,UACHC,SAAUC,KAAKlB,aACfK,MAAOa,KAAKP,MAAMR,SAClBgB,YAAY,oBACZC,UAAU,MAEV,4BAAQC,QAASH,KAAKZ,aAAtB,iB,GAxCOgB,aCkEJC,G,wDA/Db,aAAe,IAAD,8BACZ,gBA6BFC,WAAa,SAACC,GACEnC,EAASkB,WAAWC,MAC5BiB,MAAMD,GAAQE,UA9BpB,EAAKhB,MAAQ,CACXiB,MAAO,GACPzB,SAAU,IAJA,E,gEAQO,IAAD,OAEJb,EAASkB,WAAWC,MAC5BoB,GAAG,SAAS,SAACC,GAEjB,IAAMC,EAAU,GAEVC,EAAOF,EAASG,MAEtB,IAAK,IAAIC,KAAOF,EACdD,EAASrB,KAAK,CAACwB,IAAKA,EAAKC,KAAMH,EAAKE,KAGtC,EAAKhC,SAAS,CACZ0B,MAAOG,S,+BAaH,IAAD,OACP,OACE,yBAAKjB,UAAU,OACb,4BACE,0BAAMA,UAAU,SAAhB,kBAEF,yBAAKA,UAAU,wBACf,uBAAGA,UAAU,eAAb,UAAkC,qCAAlC,+CACA,kBAAC,EAAD,MAEA,wBAAIA,UAAU,WAEZI,KAAKP,MAAMiB,MAAMQ,KAAI,SAACC,GACpB,OACE,wBAAIH,IAAKG,EAAKH,KACZ,2BAAIG,EAAKF,MACT,uBAAGrB,UAAU,mBAAmBO,QAAS,kBAAM,EAAKG,WAAWa,EAAKH,mB,GApDlEZ,cCMEgB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.103343ec.chunk.js","sourcesContent":["import firebase from 'firebase/app';\nimport 'firebase/database';\n\nconst firebaseConfig = {\n    apiKey: \"AIzaSyBirRTMn1LWWLnAEWCqOIN2Wem_xBkPrdg\",\n    authDomain: \"goals-app-f14ef.firebaseapp.com\",\n    databaseURL: \"https://goals-app-f14ef.firebaseio.com\",\n    projectId: \"goals-app-f14ef\",\n    storageBucket: \"goals-app-f14ef.appspot.com\",\n    messagingSenderId: \"86249765772\",\n    appId: \"1:86249765772:web:46c422997cb5062f7c34a9\"\n};\n  // Initialize Firebase\nfirebase.initializeApp(firebaseConfig);\n\nexport default firebase;","import React, { Component } from 'react';\nimport firebase from './Firebase';\n\n//Create Form class component\nclass Form extends Component {\n    constructor() {\n        super();\n        this.state = {\n            userGoal: \"\"\n        }\n    }\n\n    //When user inputs goal, save state\n    handleChange = (event) => {\n    this.setState({\n        userGoal: event.target.value\n    })\n}\n\n//when user adds goal, store value in firebase and display new goal on the screen\nhandleClick = (event) => {\n    event.preventDefault();\n\n    const dbRef = firebase.database().ref();\n    dbRef.push(this.state.userGoal);\n\n    this.setState({\n    userGoal: ''\n    })\n}\n\n//form to be displayed on the screen\nrender() {\n    return(\n        <form action=\"submit\">\n            <label htmlFor=\"newGoal\" className=\"sr-only\">Add New Goal Here</label>\n            <input \n            type=\"text\"\n            id=\"newGoal\"\n            onChange={this.handleChange}\n            value={this.state.userGoal}\n            placeholder=\"Add New Goal Here\"\n            minLength=\"3\"\n            />\n            <button onClick={this.handleClick}>Add Goal</button>\n        </form>\n    )\n}\n\n};\n\nexport default Form;","import React, { Component } from 'react';\nimport firebase from './Firebase';\nimport Form from './Form';\nimport './App.css';\n\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      goals: [],\n      userGoal: ''\n    }\n  }\n\n  componentDidMount() {\n    //This variable refers to data held in the firebase database.\n    const dbRef = firebase.database().ref();\n    dbRef.on('value', (snapshot) => {\n      \n      const newGoals =[];\n\n      const data = snapshot.val()\n\n      for (let key in data) {\n        newGoals.push({key: key, name: data[key]});\n      }\n\n      this.setState({\n        goals: newGoals\n      })\n\n    })\n    \n  }\n\n\n  deleteGoal = (goalId) => {\n    const dbRef = firebase.database().ref()\n    dbRef.child(goalId).remove();\n  }\n\n  render() {\n    return (\n      <div className=\"app\">\n        <h1>\n          <span className=\"title\">Monthly Goals</span>\n        </h1>\n        <div className=\"appContainer wrapper\">\n        <p className=\"description\"> Write <span>one</span> goal you'd like to accomplish this month. </p>\n        <Form />\n        \n        <ul className=\"wrapper\">\n        {\n          this.state.goals.map((goal) => {\n            return (\n              <li key={goal.key}>\n                <p>{goal.name}</p>\n                <i className=\"fas fa-backspace\" onClick={() => this.deleteGoal(goal.key)}></i>  \n              </li>\n            )\n          })\n        }\n        </ul>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}