{"version":3,"sources":["Firebase.js","App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","App","handleChange","event","setState","userGoal","target","value","handleClick","preventDefault","database","ref","push","state","goals","on","snapshot","newGoals","data","val","key","className","action","htmlFor","type","id","onChange","this","placeholder","onClick","map","goal","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"iTAaAA,IAASC,cAVc,CACnBC,OAAQ,0CACRC,WAAY,kCACZC,YAAa,yCACbC,UAAW,kBACXC,cAAe,8BACfC,kBAAmB,cACnBC,MAAO,6CAKIR,QAAf,EC8FeS,G,wDAvGb,aAAe,IAAD,8BACZ,gBA4BFC,aAAe,SAACC,GACd,EAAKC,SAAS,CACZC,SAAUF,EAAMG,OAAOC,SA/Bb,EAmCdC,YAAc,SAACL,GACbA,EAAMM,iBAEQjB,EAASkB,WAAWC,MAC5BC,KAAK,EAAKC,MAAMR,UAEtB,EAAKD,SAAS,CACZC,SAAU,MAxCZ,EAAKQ,MAAQ,CACXC,MAAO,GACPT,SAAU,IAJA,E,gEAQO,IAAD,OAEJb,EAASkB,WAAWC,MAC5BI,GAAG,SAAS,SAACC,GAEjB,IAAMC,EAAU,GAEVC,EAAOF,EAASG,MAEtB,IAAK,IAAIC,KAAOF,EACdD,EAASL,KAAKM,EAAKE,IAGrB,EAAKhB,SAAS,CACZU,MAAOG,S,+BAyBX,OACE,yBAAKI,UAAU,OACb,6CAGA,qCAAU,qCAAV,+CACA,0BAAMC,OAAO,UACX,2BAAOC,QAAQ,UAAUF,UAAU,WAAnC,qBACA,2BACAG,KAAK,OACLC,GAAG,UACHC,SAAUC,KAAKzB,aACfK,MAAOoB,KAAKd,MAAMR,SAClBuB,YAAY,sBAEZ,4BAAQC,QAASF,KAAKnB,aAAtB,aAGF,4BAEEmB,KAAKd,MAAMC,MAAMgB,KAAI,SAACC,GACpB,OACE,4BACE,2BAAIA,a,GAvEFC,cCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.b593937f.chunk.js","sourcesContent":["import firebase from 'firebase/app';\nimport 'firebase/database';\n\nconst firebaseConfig = {\n    apiKey: \"AIzaSyBirRTMn1LWWLnAEWCqOIN2Wem_xBkPrdg\",\n    authDomain: \"goals-app-f14ef.firebaseapp.com\",\n    databaseURL: \"https://goals-app-f14ef.firebaseio.com\",\n    projectId: \"goals-app-f14ef\",\n    storageBucket: \"goals-app-f14ef.appspot.com\",\n    messagingSenderId: \"86249765772\",\n    appId: \"1:86249765772:web:46c422997cb5062f7c34a9\"\n};\n  // Initialize Firebase\nfirebase.initializeApp(firebaseConfig);\n\nexport default firebase;","import React, { Component } from 'react';\nimport firebase from './Firebase'\nimport './App.css';\n\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      goals: [],\n      userGoal: ''\n    }\n  }\n\n  componentDidMount() {\n    //This variable refers to data held in the firebase database.\n    const dbRef = firebase.database().ref();\n    dbRef.on('value', (snapshot) => {\n      \n      const newGoals =[];\n\n      const data = snapshot.val()\n\n      for (let key in data) {\n        newGoals.push(data[key]);\n      }\n\n      this.setState({\n        goals: newGoals\n      })\n\n    })\n    \n  }\n\n  handleChange = (event) => {\n    this.setState({\n      userGoal: event.target.value\n    })\n  }\n\n  handleClick = (event) => {\n    event.preventDefault();\n\n    const dbRef = firebase.database().ref();\n    dbRef.push(this.state.userGoal);\n\n    this.setState({\n      userGoal: ''\n    })\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <h1>\n          Monthly Goals\n        </h1>\n        <p> Write <span>one</span> goal you'd like to accomplish this month. </p>\n        <form action=\"submit\">\n          <label htmlFor=\"newGoal\" className=\"sr-only\" >Add New Goal Here</label>\n          <input \n          type=\"text\"\n          id=\"newGoal\"\n          onChange={this.handleChange}\n          value={this.state.userGoal}\n          placeholder=\"Add New Goal Here\"/>\n\n          <button onClick={this.handleClick}>Add Goal</button>\n        </form>\n        \n        <ul>\n        {\n          this.state.goals.map((goal) => {\n            return (\n              <li>\n                <p>{goal}</p>\n              </li>\n            )\n          })\n        }\n        </ul>\n      </div>\n    )\n  }\n}\n\n\n// componentDidMount() {\n//   const dbRef = firebase.databse().ref();\n//   dbRef.on('value', (data) => {\n//     const newGoal = data.val();\n//     console.log(newGoal);\n    \n    // const newGoalArray = [];\n\n    // for(propName in newGoal) {\n    //   newGoalArray.push()\n    // }\n\n    // console.log(newGoal)\n\n    // this.setState({\n    //   goals: newGoalArray\n//     // })\n//   })\n// }\n\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}